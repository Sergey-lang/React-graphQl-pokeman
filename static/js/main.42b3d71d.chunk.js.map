{"version":3,"sources":["graphql/get-pokemons.ts","components/Pokemon.tsx","containers/PockemonsContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GET_POKEMONS","gql","Pokemon","pokemon","attacks","special","slice","map","attack","name","damage","className","maxHP","maxCP","src","image","alt","PokemonsContainer","useQuery","variables","first","data","pokemons","p","id","link","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAuBaA,EAAeC,cAAH,0V,OChBZC,EAA+B,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAEpCC,EAAUD,GACZA,EAAQC,SACRD,EAAQC,QAAQC,QACXC,MAAM,EAAG,GACTC,KAAI,SAACC,GAAD,OACD,+BAA2BA,EAAOC,MAAvBD,EAAOE,WAG9B,OACI,sBAAKC,UAAU,UAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,4BAAIR,EAAQM,SAEhB,sBAAKE,UAAU,gBAAf,UACI,+BAAOR,EAAQS,QACf,+BAAOT,EAAQU,WAEnB,qBAAKF,UAAU,iBAAf,SACI,qBAAKG,IAAKX,EAAQY,MAAOC,IAAKb,EAAQM,SAEzCN,EAAQC,QAAQC,SACjB,qBAAKM,UAAU,mBAAf,SACKP,QC1BJa,EAA8B,WAAO,IAAD,EAERC,mBAAsClB,EAAc,CACrFmB,UAAW,CAACC,MAAO,KADhBC,KAFsC,gBAEd,GAFc,GAE/BC,gBAF+B,MAEpB,GAFoB,EAM7C,OACI,qBAAKX,UAAU,YAAf,SAEQW,EAASf,KAAI,SAAAgB,GACT,OAAO,cAAC,EAAD,CAAoBpB,QAASoB,GAAfA,EAAEC,UCV9BC,EAAOC,yBAAe,CAC/BC,IAAK,oCAGIC,EAAS,IAAIC,eAAa,CACnCC,MAAO,IAAIC,gBACXN,SAGSO,EAAgB,WACzB,OACI,cAAC,iBAAD,CAAgBJ,OAAQA,EAAxB,SACI,8BACI,cAAC,EAAD,SCJDK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.42b3d71d.chunk.js","sourcesContent":["import {gql} from '@apollo/client';\r\n\r\nexport interface IPokemon {\r\n    id: number;\r\n    name: string;\r\n    maxCP: number;\r\n    maxHP: number;\r\n    image: string;\r\n    attacks: {\r\n        fast: Array<{ __typename: string, name: string, damage: number }>;\r\n        special: Array<{ __typename: string, name: string, damage: number }>;\r\n    };\r\n    __typename: string;\r\n}\r\n\r\nexport interface IPokemonsData {\r\n    pokemons: IPokemon[];\r\n}\r\n\r\nexport interface IPokemonVars {\r\n    first: number;\r\n}\r\n\r\nexport const GET_POKEMONS = gql`\r\n    query pokemons($first: Int!) {\r\n        pokemons(first: $first) {\r\n            id\r\n            name\r\n            image\r\n            maxHP\r\n            maxCP\r\n            attacks {\r\n                special {\r\n                    name\r\n                    damage\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n","import React from 'react';\r\nimport {IPokemon} from '../graphql/get-pokemons';\r\n\r\ntype PropsType = {\r\n    pokemon: IPokemon\r\n}\r\n\r\nexport const Pokemon: React.FC<PropsType> = ({pokemon}) => {\r\n\r\n    const attacks = pokemon &&\r\n        pokemon.attacks &&\r\n        pokemon.attacks.special\r\n            .slice(0, 3)\r\n            .map((attack: { __typename: string, name: string, damage: number }) => (\r\n                <span key={attack.damage}>{attack.name}</span>\r\n            ))\r\n\r\n    return (\r\n        <div className='pokemon'>\r\n            <div className=\"pokemon__name\">\r\n                <p>{pokemon.name}</p>\r\n            </div>\r\n            <div className=\"pokemon__meta\">\r\n                <span>{pokemon.maxHP}</span>\r\n                <span>{pokemon.maxCP}</span>\r\n            </div>\r\n            <div className=\"pokemon__image\">\r\n                <img src={pokemon.image} alt={pokemon.name}/>\r\n            </div>\r\n            {pokemon.attacks.special &&\r\n            <div className=\"pokemon__attacks\">\r\n                {attacks}\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {useQuery} from '@apollo/client';\r\nimport {GET_POKEMONS, IPokemonsData, IPokemonVars} from '../graphql/get-pokemons';\r\nimport {Pokemon} from '../components/Pokemon';\r\n\r\nexport const PokemonsContainer: React.FC = () => {\r\n\r\n    const {data: {pokemons = []} = {}} = useQuery<IPokemonsData, IPokemonVars>(GET_POKEMONS, {\r\n        variables: {first: 9}\r\n    })\r\n\r\n    return (\r\n        <div className='container'>\r\n            {\r\n                pokemons.map(p => {\r\n                    return <Pokemon key={p.id} pokemon={p}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css'\nimport {PokemonsContainer} from './containers/PockemonsContainer';\nimport {ApolloClient, ApolloProvider, createHttpLink, InMemoryCache} from '@apollo/client';\n\nexport const link = createHttpLink({\n    uri: 'https://graphql-pokemon2.now.sh'\n});\n\nexport const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link,\n});\n\nexport const App: React.FC = () => {\n    return (\n        <ApolloProvider client={client}>\n            <div>\n                <PokemonsContainer/>\n            </div>\n        </ApolloProvider>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}